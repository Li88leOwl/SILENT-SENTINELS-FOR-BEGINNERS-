import hashlib
import requests
import os
import time 
import tkinter as tk
from tkinter import filedialog, messagebox

# VirusTotal API Setup
VIRUSTOTAL_API_KEY = 'Enter your API KEY'  # Replace with your VirusTotal API Key
VIRUSTOTAL_API_URL = "https://www.virustotal.com/api/v3/files/"

# Hardcoded malware hashes (for now, you can expand this list as you build further)
MALWARE_HASHES = {
    "d41d8cd98f00b204e9800998ecf8427e": "EICAR Test File",
    "e99a18c428cb38d5f260853678922e03": "Generic Trojan 1",
    "9e107d9d372bb6826bd81d3542a419d6": "Generic Trojan 2",
    "5baa61e4c9b93f3f0682250b6cf8331b": "Backdoor.Agent.A",
    "c4ca4238a0b923820dcc509a6f75849b": "Banking Trojan 1",
    "5f4dcc3b5aa765d61d8327deb882cf99": "Spyware.Generic",
    "098f6bcd4621d373cade4e832627b4f6": "Rootkit.Generic",
    "f5d3e1d26b299283f08b24c2e93a31d1": "Adware.A",
    "8f14e45fceea167a5a36dedd4bea2543": "Cryptojacker 1",
    "2c6ee24b09816a6f14f95d1698b24ead": "Virus.Win32",
    "ad0234829205b9033196ba818f7a872b": "Ransomware.Generic",
    "98f13708210194c475687be6106a3b84": "TrojanDownloader.Generic",
    "6cbf8d0b196f43f0795ba8f5c6d2fc3a": "Trojan.Generic",
    "ec50c2c9a52b303705de6c0715669c5d": "Rootkit.Win32",
    "d4e3c44cc9299b63b01da418624ed7db": "Worm.Generic",
    "b6d81b360ab5ca0cc56b00ebc6358e4b": "Trojan.Generic 2",
    "b6d8d64ecb5630e8c3a85b9f697a94ba": "Spyware.Win32",
    "7fc56270e7a70fa81a5935b72eacbe29": "MaliciousScript",
    "0cc175b9c0f1b6a831c399e269772661": "FakeAV",
    "8e6c21fe0c03a0d16ca5cf87b870b034": "Worm.Win32",
    "b7fd22e11ff56d7c178ba225a66f32bc": "Backdoor.Win32",
    "0d61f8370f3a1a2bc6c1b3d5b2a5b313": "Rootkit.Win64",
    "c20ad4d76fe97759aa27a0c99bff6710": "TrojanHorse.Generic",
    "800618943025f1cae7f4bff9df9bf763": "Ransomware.Win32",
    "d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2": "Spyware.Backdoor",
    "fd3f5f8e9bc3791e3b6c1f2b91e45799": "Downloader.Win32",
    "4a8b07b5fc9d31d7fd8bcb76f8a7a90a": "TrojanSpyware",
    "689425cb2ec72ca01ab379c3f8d42cd4": "Ransomware.Win64",
    "ed79b3008324c155ff443a08c8b88f70": "Rootkit.Backdoor",
    "2a9b58c8a5db520c4e3fc2a1d1f5a7b0": "FakeAV.Trojan",
    "16e09f1d354226755fc13fd63410bc18": "Exploit.Win32",
    "7f1fe0a118ab420ed42473c38e1b77a5": "Cryptojacker 2",
    "991d86c6f5a65a057020ac3541c26333": "Worm.Agent",
    "01b3c9c3f9a0400e1a4e48f11824f1c3": "TrojanSpy",
    "64c0d58a8c2e4337b04a7fded9eb54c3": "Rootkit.Trojan",
    "e5818c173c45acdb12d1eb58e1e61e39": "Adware.Win32",
    "3d5e9b2b9cdb933c62f602118018df87": "Backdoor.Trojan",
    "ca989b26869d0deaf9b6f879ed56d8e0": "Keylogger.Win32",
    "29f702b728c3b2f5f5c6c660625b62f1": "Ransomware.Agent",
    "f640ff6a8ad7bffb8f5beedfcf3f383f": "Worm.Ransomware",
    "32c4a4f303b17d24cbdd56e92d07b4c0": "Trojan.FakeAV",
    "1fd124c840ea98276e3e988cdd457f6f": "Cryptominer.Win32",
    "2386d6e599b079b3f81c1c8db3a3b187": "Trojan.Generic 3",
    "46a4efcb3201a92b09c0532f6749f2a5": "Rootkit.Adware",
    "8b3d4c0d8277f4ebed56f2cd8360f8cc": "Exploit.Generic",
    "b3c40b3d01a81b8fd4b0cfa6d410195b": "TrojanDownloader",
    "9eab7c9b1181b6259c71e94931a67264": "Banking.Trojan",
    "31985e9c5fa532cf9e5009a27f27e0f9": "Spyware.Trojan",
    "b1c2b9e50f68f3170c7f6406d9c01963": "Backdoor.Worm",
    "5d4e607cd07b27e7d91cf17dcd81b34f": "Adware.Agent",
    "22ed7b5e6729be9cc7222f17bb6ab8e3": "Trojan.Worm",
    "da3f7a7f6b78c912b035cbf69b930b2f": "Spyware.Trojan",
    "5a0f83078e9cf60c59fe53f4a9c98e6b": "Exploit.Win64",
    "5018ef9e2d5f9256a3a89721c8e55f58": "Banking.Trojan 2",
    "9a47a8ee5d66f6b6e6d2316a6881712b": "Trojan.Agent.A 2",
    "d0fbb5062649f7ca14d26e6ed24a4cd0": "Adware.Generic 2",
    "4b01fd0427f9f4f89e16e0b13cb1ac60": "Ransomware.Backdoor"
}

# VirusTotal API Setup
import time

def check_with_virustotal(file_hash):
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    url = VIRUSTOTAL_API_URL + file_hash
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an exception for HTTP errors
        
        if response.status_code == 200:
            data = response.json()
            if data['data']['attributes']['last_analysis_stats']['malicious'] > 0:
                return f"Malware Detected: {data['data']['id']}"
            else:
                return "No malware detected by VirusTotal."
        elif response.status_code == 429:
            # If rate limit is exceeded, wait for a minute before retrying
            msg = "Rate limit exceeded. Retrying in 60 seconds..."
            print(msg)
            time.sleep(60)  # Wait for 60 seconds
            return check_with_virustotal(file_hash)  # Retry the request
        else:
            # Print the response status code and message for debugging
            return f"Error {response.status_code}: {response.text}"

    except requests.exceptions.RequestException as e:
        # Catch network errors and print the exception
        return f"Network Error: {str(e)}"


# Malware Detection App
class MalwareDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Malware Detection Using File Hashing")
        self.root.geometry("600x400")

        # Create UI components
        self.detect_button = tk.Button(root, text="Select File to Scan", command=self.select_file)
        self.detect_button.pack(pady=10)

        self.result_label = tk.Label(root, text="Result will appear here", wraplength=500)
        self.result_label.pack(pady=20)

    def select_file(self):
        file_path = filedialog.askopenfilename(title="Select a File to Scan")
        if file_path:
            file_hash = self.get_file_hash(file_path)
            result = self.check_for_malware(file_hash)
            self.display_result(result)

    def get_file_hash(self, file_path):
        # Calculate the file's hash (SHA-256)
        hash_sha256 = hashlib.sha256()
        try:
            with open(file_path, 'rb') as file:
                while chunk := file.read(4096):  # Read file in chunks
                    hash_sha256.update(chunk)
            return hash_sha256.hexdigest()
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while reading the file: {e}")
            return None

    def check_for_malware(self, file_hash):
        # First check the hardcoded list of malware hashes
        local_result = MALWARE_HASHES.get(file_hash)
        if local_result:
            return f"Malware Detected: {local_result} (Local Database)"
        
        # If not found, check with VirusTotal API
        return check_with_virustotal(file_hash)

    def display_result(self, result):
        self.result_label.config(text=result)

# Initialize the app
if __name__ == "__main__":
    root = tk.Tk()
    app = MalwareDetectionApp(root)
    root.mainloop()
